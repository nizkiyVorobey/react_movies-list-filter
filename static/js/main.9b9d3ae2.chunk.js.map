{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/SearchField/SearchField.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","query","filteredMovies","filter","movie","toLowerCase","includes","length","map","key","imdbId","SearchFiled","changeQuery","htmlFor","type","id","placeholder","onChange","event","target","value","App","state","serchFiledValue","changeSerchFiledValue","setState","prevState","this","moviesFromServer","Component","ReactDOM","render","document","getElementById"],"mappings":"swEAIaA,G,kBAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,QAA/B,OACvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aAaRJ,EAAUS,aAAe,CACvBP,YAAa,ICxCR,IAAMQ,EAAa,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC/BC,EAAiB,KAgBrB,OAdID,GACFC,EAAiBF,EAAOG,QACtB,SAAAC,GAAK,OAAIA,EAAMd,MAAMe,cAAcC,SAASL,EAAMI,mBAGhCE,SAClBL,EAAiBF,EAAOG,QACtB,SAAAC,GAAK,OAAIA,EAAMb,YAAYc,cAAcC,SAASL,EAAMI,mBAI5DH,EAAiBF,EAIjB,yBAAKN,UAAU,UACZQ,EAAeM,KAAI,SAAAJ,GAAK,OACvB,kBAAC,EAAD,eAAWK,IAAKL,EAAMM,QAAYN,SAmB1CL,EAAWD,aAAe,CACxBE,OAAQ,IC3CH,IAAMW,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACzB,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,SACb,2BAAOmB,QAAQ,eAAenB,UAAU,SAAxC,gBAIA,yBAAKA,UAAU,WACb,2BACEoB,KAAK,OACLC,GAAG,eACHrB,UAAU,QACVsB,YAAY,mBACZC,SACE,SAAAC,GAAK,OAAIN,EAAYM,EAAMC,OAAOC,c,OCXjCC,EAAb,2MACEC,MAAQ,CACNC,gBAAiB,IAFrB,EAKEC,sBAAwB,SAACJ,GACvB,EAAKK,UAAS,SAAAC,GAAS,MAAK,CAC1BH,gBAAiBH,OAPvB,wEAYI,OACE,yBAAK1B,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAakB,YAAae,KAAKH,wBAE/B,kBAAC,EAAD,CACExB,OAAQ4B,EACR3B,MAAO0B,KAAKL,MAAMC,mBAGtB,yBAAK7B,UAAU,WAAf,0BAtBR,GAAyBmC,aCDzBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9b9d3ae2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies, query }) => {\n  let filteredMovies = null;\n\n  if (query) {\n    filteredMovies = movies.filter(\n      movie => movie.title.toLowerCase().includes(query.toLowerCase()),\n    );\n\n    if (!filteredMovies.length) {\n      filteredMovies = movies.filter(\n        movie => movie.description.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n  } else {\n    filteredMovies = movies;\n  }\n\n  return (\n    <div className=\"movies\">\n      {filteredMovies.map(movie => (\n        <MovieCard key={movie.imdbId} {...movie} />\n      ))}\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n\n  query: PropTypes.string.isRequired,\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchFiled = ({ changeQuery }) => (\n  <div className=\"box\">\n    <div className=\"field\">\n      <label htmlFor=\"search-query\" className=\"label\">\n        Search movie\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id=\"search-query\"\n          className=\"input\"\n          placeholder=\"Type search word\"\n          onChange={\n            event => changeQuery(event.target.value)\n          }\n        />\n      </div>\n    </div>\n  </div>\n);\n\nSearchFiled.propTypes = {\n  changeQuery: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { SearchFiled } from './components/SearchField/SearchField';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    serchFiledValue: '',\n  };\n\n  changeSerchFiledValue = (value) => {\n    this.setState(prevState => ({\n      serchFiledValue: value,\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <SearchFiled changeQuery={this.changeSerchFiledValue} />\n\n          <MoviesList\n            movies={moviesFromServer}\n            query={this.state.serchFiledValue}\n          />\n        </div>\n        <div className=\"sidebar\">\n          Sidebar goes here\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}